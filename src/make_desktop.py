#!/usr/bin/python
# ------------------------------------------------------------------------------------
#   WRW 23-June-2025 - taken from fb_make_desktop.py
# ------------------------------------------------------------------------------------

import os
import sys
from pathlib import Path
import datetime
from Store import Store

# ------------------------------------------------------------------------------------

desktop_proto = """
# -----------------------------------------------------------------
#   what.desktop
#   What?
#   This is generated by make_desktop.py for a package type.
#   Generated: <Date>
#   Package type: <Type>
# -----------------------------------------------------------------

[Desktop Entry]
Categories=Audio;Player;AudioVideo;            
Comment[en_US]=
Comment=
Exec=<Exec>
Icon=<Icon>
Path=<Path>
GenericName[en_US]=What? - (Bill's Hearing Test)
GenericName=What? - (Bill's Hearing Test)
MimeType=
Name[en_US]=What?
Name=What?
StartupNotify=true
Terminal=false
Type=Application
Version=1.0
X-DBUS-ServiceName=
X-DBUS-StartupType=
X-Desktop-File-Install-Version=0.15
X-KDE-SubstituteUID=false
X-KDE-Username=
"""

# ------------------------------------------------------------------------------------

def make_desktop():

    s = Store()

    # -------------------------------------------------------
    #   Collect some common values.

    date = datetime.datetime.today().strftime( '%a, %d-%b-%Y, %H:%M:%S')
    home = os.getenv( 'HOME' )              # or os.environ[ 'HOME' ]

    # -------------------------------------------------------
    #   Get values specific to package_type

    #   Tar mimics Setuptools installation.

    package_type = s.Const.Package_Type 

    if package_type ==  'PyInstaller':
        executable = str( Path( sys.executable ).resolve())
        executable_parent = str( Path( sys.executable ).parent.resolve())
        Exec = f"/bin/sh -c {executable}"
        Icon = str(Path( s.Const.stdConfig, s.Const.Icon_File_PNG ))
        PPath = executable_parent

    elif package_type == 'Development':
        program = str( Path( sys.argv[0] ).resolve())           # Where birdland executed
        program_dir = str( Path( __file__ ).parent.resolve())   # Where modules live
        Exec = f"/bin/sh -c {program}"
        Icon = str(Path( s.Const.stdConfig, s.Const.Icon_File_PNG ))
        PPath = program_dir

    else:
        txt = f"ERROR-DEV: Unexpected package_type '{package_type }' at make_desktop()"  
        print( txt, file=sys.stderr )
        sys.exit(1)

    # -------------------------------------------------------
    #   Do tilda expansion

    Exec = Exec.replace( '~', home )
    Icon = Icon.replace( '~', home )
    PPath = PPath.replace( '~', home )

    #   Substitute values in prototype

    d = desktop_proto
    d = d.replace( '<Exec>', Exec )
    d = d.replace( '<Icon>', Icon )
    d = d.replace( '<Path>', PPath )
    d = d.replace( '<Type>', package_type )
    d = d.replace( '<Date>', date )
    # d = d.replace( '<Python>', python )

    # -------------------------------------------------------
    #   Show off our work. No, only for debugging

    # if verbose:
    #     print( d )

    # -------------------------------------------------------
    #   Install the file for now on every launch. Important
    #   for testing because I will forget to remove it.

    opath = Path( s.Const.stdApplication, s.Const.What_Desktop ).expanduser()

    # if opath.is_file():
    #     print( f"NOTE: {opath} exists, overwriting", file=sys.stderr )

    opath.write_text( d )

# ------------------------------------------------------------------------------------

if __name__ == '__main__':
    make_desktop()
    if False:
        make_desktop( 'Development', True )
        make_desktop( 'Tar', True )
        make_desktop( 'Setuptools', True )
        make_desktop( 'PyInstaller', True )
        make_desktop( 'Nuitka', True )

# ------------------------------------------------------------------------------------
